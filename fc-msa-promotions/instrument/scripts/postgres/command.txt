====================================
 PostgreSQL CLI & SQL Commands
====================================

# --- Container & Login ---
docker exec -it postgres bash
psql -U postgres
psql -U postgres -d mydb
psql -h 127.0.0.1 -p 5432 -U postgres -d mydb

# --- Basic Meta Commands (psql) ---
\l                  # List databases
\c dbname           # Connect to a database
\dt                 # List tables
\d table_name       # Describe table
\d+ table_name      # Describe with details
\dn                 # List schemas
\du                 # List users/roles
\conninfo           # Show current connection info
\i file.sql         # Run SQL script
\q                  # Quit psql

====================================
 SQL COMMANDS
====================================

# --- DDL (Data Definition Language) ---
CREATE DATABASE mydb;
DROP DATABASE mydb;

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE users ADD COLUMN age INT;
ALTER TABLE users DROP COLUMN age;
ALTER TABLE users RENAME COLUMN name TO full_name;
DROP TABLE users;

# --- DML (Data Manipulation Language) ---
INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com');
SELECT * FROM users;
SELECT id, name FROM users WHERE email = 'alice@example.com';
UPDATE users SET name = 'Alice Updated' WHERE id = 1;
DELETE FROM users WHERE id = 2;

# --- DCL (Data Control Language) ---
CREATE USER myuser WITH PASSWORD 'secret';
GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser;
GRANT SELECT, INSERT ON TABLE users TO myuser;
REVOKE INSERT ON TABLE users FROM myuser;

# --- TCL (Transaction Control Language) ---
BEGIN;                       
UPDATE users SET name = 'Temp' WHERE id = 1;
ROLLBACK;                    
BEGIN;
UPDATE users SET name = 'Final' WHERE id = 1;
COMMIT;                      
SAVEPOINT sp1;               
ROLLBACK TO sp1;             

====================================
 ADVANCED COMMANDS
====================================

# --- Indexing ---
CREATE INDEX idx_users_email ON users(email);
CREATE UNIQUE INDEX idx_users_unique_email ON users(email);
DROP INDEX idx_users_email;

# Full Text Search Index
CREATE INDEX idx_users_name_gin 
    ON users USING gin(to_tsvector('english', name));

# --- Constraints ---
ALTER TABLE users ADD CONSTRAINT fk_users_role 
    FOREIGN KEY(role_id) REFERENCES roles(id);

# --- Sequences & Identity ---
CREATE SEQUENCE user_seq START 1;
ALTER TABLE users ALTER COLUMN id SET DEFAULT nextval('user_seq');

# --- Views & Materialized Views ---
CREATE VIEW active_users AS SELECT * FROM users WHERE active = true;
CREATE MATERIALIZED VIEW mv_orders AS SELECT * FROM orders;
REFRESH MATERIALIZED VIEW mv_orders;

# --- Functions & Procedures ---
CREATE FUNCTION add_numbers(a INT, b INT) RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql;

# --- Triggers ---
CREATE TRIGGER update_timestamp
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

# --- Partitioning ---
CREATE TABLE measurement (
    city_id INT,
    logdate DATE,
    peaktemp INT
) PARTITION BY RANGE (logdate);

# --- Performance & Query Analysis ---
EXPLAIN SELECT * FROM users WHERE email = 'alice@example.com';
EXPLAIN ANALYZE SELECT * FROM users WHERE email = 'alice@example.com';

# --- Maintenance ---
VACUUM;
VACUUM FULL;
ANALYZE;
REINDEX TABLE users;

# --- Backup & Restore ---
pg_dump -U postgres mydb > backup.sql
pg_restore -U postgres -d mydb backup.dump
psql -U postgres -d mydb -f backup.sql

====================================
 USEFUL QUERIES
====================================
SELECT current_database();
SELECT current_user;
SELECT version();
